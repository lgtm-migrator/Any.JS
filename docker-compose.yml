version: '3.2'

services:
  mongodb:
    image: mongo
    volumes:
      - /mnt/mongodb:/data/db
      - /mnt/mongodump:/dump
    command: 'mongod --oplogSize 128 --replSet rs0'
    environment:
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_DATABASE=admin
      - MONGO_INITDB_USER=mongodb
      - MONGO_INITDB_PWD=mongodb
    networks:
      - proxy
    deploy:
      placement:
        constraints:
          - "node.role == manager"
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  mongodb-init-replica:
    image: mongo
    command: 'mongo mongo/anyjs-db --eval "rs.initiate({ _id: ''rs0'', members: &#91; { _id: 0, host: ''127.0.0.1:27017'' } ]})"'
    depends_on:
      - mongodb
    networks:
      - proxy
    deploy:
      placement:
        constraints:
          - "node.role == manager"
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  server:
    image: lucasurzedo/anyjs:1.0
    depends_on:
      - mongodb
    deploy:
      placement:
        constraints:
          - "node.role==worker"
    environment:
      NODE_ENV: development
    ports:
      - "4445:4445"

  observer:
    image: lucasurzedo/anyjsobserver:1.0
    deploy:
      placement:
        constraints:
          - "node.role==worker"
    ports:
      - "4447:4447"

  gatewayapi:
    image: devopsfaith/krakend:2
    volumes:
      - ./src/microservices/krakend:/etc/krakend
    ports:
      - "1234:1234"
      - "80:8080"
      - "8090:8090"
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]

  agent:
    image: portainer/agent:linux-amd64-2.1.0-alpine
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portainer
    deploy:
      mode: global
      placement:
        constraints:
          - "node.platform.os==linux"

  portainer:
    image: portainer/portainer-ce:2.1.1-alpine
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer:/data
    networks:
      - portainer
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"

networks:
  portainer:
  database:
  agent_network:
    driver: overlay
    attachable: true
  proxy:

volumes:
  portainer_data:
  mongodb:
    driver: "local"
  mongodump:
    driver: "local"
  anyjs:
  portainer:
